local old = getrenv().gcinfo
getrenv().gcinfo = function(...)
    return wait(9e9)
end

local CoreGui = game.CoreGui
local ContentProvider = game.ContentProvider
local RobloxGuis = {"RobloxGui", "TeleportGui", "RobloxPromptGui", "RobloxLoadingGui", "PlayerList", "RobloxNetworkPauseNotification", "PurchasePrompt", "HeadsetDisconnectedDialog", "ThemeProvider", "DevConsoleMaster"}

local function FilterTable(tbl)
    local context = syn_context_get()
    syn_context_set(7)
    local new = {}
    for i,v in ipairs(tbl) do --roblox iterates the array part
        if typeof(v) ~= "Instance" then
            table.insert(new, v)
        else
            if v == CoreGui or v == game then
                --insert only the default roblox guis
                for i,v in pairs(RobloxGuis) do
                    local gui = CoreGui:FindFirstChild(v)
                    if gui then
                        table.insert(new, gui)
                    end
                end

                if v == game then
                    for i,v in pairs(game:GetChildren()) do
                        if v ~= CoreGui then
                            table.insert(new, v)
                        end
                    end
                end
            else
                if not CoreGui:IsAncestorOf(v) then
                    table.insert(new, v)
                else
                    --don't insert it if it's a descendant of a different gui than default roblox guis
                    for j,k in pairs(RobloxGuis) do
                        local gui = CoreGui:FindFirstChild(k)
                        if gui then
                            if v == gui or gui:IsAncestorOf(v) then
                                table.insert(new, v)
                                break
                            end
                        end
                    end
                end
            end
        end
    end
    syn_context_set(context)
    return new
end

local old
old = hookfunc(ContentProvider.PreloadAsync, function(self, tbl, cb)
    if self ~= ContentProvider or type(tbl) ~= "table" or type(cb) ~= "function" then --note: callback can be nil but in that case it's useless anyways
        return old(self, tbl, cb)
    end

    --check for any errors that I might've missed (such as table being {[2] = "something"} which causes "Unable to cast to Array")
    local err
    task.spawn(function() --TIL pcalling a C yield function inside a C yield function is a bad idea ("cannot resume non-suspended coroutine")
        local s,e = pcall(old, self, tbl)
        if not s and e then
            err = e
        end
    end)
   
    if err then
        return old(self, tbl) --don't pass the callback, just in case
    end

    tbl = FilterTable(tbl)
    return old(self, tbl, cb)
end)

local old
old = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    if self == ContentProvider and (method == "PreloadAsync" or method == "preloadAsync") then
        local args = {...}
        if type(args[1]) ~= "table" or type(args[2]) ~= "function" then
            return old(self, ...)
        end

        local err
        task.spawn(function()
            setnamecallmethod(method) --different thread, different namecall method
            local s,e = pcall(old, self, args[1])
            if not s and e then
                err = e
            end
        end)

        if err then
            return old(self, args[1])
        end

        args[1] = FilterTable(args[1])
        setnamecallmethod(method)
        return old(self, args[1], args[2])
    end
    return old(self, ...)
end)
--[[hitbox extender]]
local baseHitboxSize = Vector3.new(2, 2, 1);
local baseTransparency = 1;
--[spoofer]
local oldGameIndex; oldGameIndex = hookmetamethod(game, "__index", newcclosure(function(...)
    local Self, Key = ...;

    if typeof(Self) == "Instance" and type(Key) == "string" and tostring(Self) == "HumanoidRootPart" and (Key == "Size" or Key == "Transparency") then
        if Key == "Size" then
            return baseHitboxSize;
        end;
        return baseTransparency;
    end;

    return oldGameIndex(...);
end));
local lp = game.Players.LocalPlayer
local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = game:GetService("Players").LocalPlayer:GetMouse()
FOV_Circle = Drawing.new("Circle")
FOV_Circle.Color = Color3.fromRGB(255,255,255)
FOV_Circle.Thickness = 2.5
FOV_Circle.NumSides = 100
FOV_Circle.Radius = 200
FOV_Circle.Visible = false
FOV_Circle.Filled = false
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
local UILibrary = loadstring(game:HttpGet("https://pastebin.com/raw/V1ca2q9s"))()

local MainUI = UILibrary.Load("ShushHUB")
local FirstPage = MainUI.AddPage("Silent aim")
local FirstLabel = FirstPage.AddLabel("Super silent aim")
local FirstToggle = FirstPage.AddToggle("Silent aim", false, function(Value)
if Value == true then
    _G.Toggle = true
    else 
        if Value == false then
            _G.Toggle = false
        end
        end
end)
local FirstToggle = FirstPage.AddToggle("Silent aim FOV", false, function(Value)
if Value == true then
    FOV_Circle.Visible = true
    else 
        if Value == false then
            FOV_Circle.Visible = false
        end
        end
end)
local FirstSlider = FirstPage.AddSlider("FOV Size", {Min = 50, Max = 500, Def = 200}, function(Value)
FOV_Circle.Radius = Value
end)
local FirstPage = MainUI.AddPage("HBE")

local FirstLabel = FirstPage.AddLabel("HBE Settings")
local FirstToggle = FirstPage.AddToggle("HBE", false, function(Value)
if Value == true then
    ---Settings for on
    getgenv().Size = Vector3.new(10,10,10)
    getgenv().QTransparencyzx = .7
    getgenv().QColourzx = Color3.fromRGB(255,255,255)
    else
        if Value == false then
        ---Settings for off
        getgenv().QSizezx = Vector3.new(2,2,1)  
        getgenv().QTransparencyzx = 1
        end
        end
end)
local FirstSlider = FirstPage.AddSlider("HBE Size", {Min = 0, Max = 100, Def = 5}, function(Value)
getgenv().QSizezx = Vector3.new(Value,Value,Value)
end)
local FirstPicker = FirstPage.AddColourPicker("HBE Colour", "white", function(Value)
getgenv().QColourzx = Value
end)

game:GetService('RunService').RenderStepped:connect(function()
    pcall(function()
        if _G.Toggle then
            for i, v in pairs(game:GetService("Workspace").KnifeHost.PowerUps:GetDescendants()) do
                if v:IsA("Part") then
                    v.Archivable = true
                end
            end
        end
    end)
end)

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and _G.Toggle == true then
        
        task.wait(.35);
    
        local function ClosestPlayerToCursor()
            local Closest = nil;
            local Distance = 9e9;
            for i, v in pairs(game:GetService("Players"):GetPlayers()) do
                if v ~= Player then
                    if Workspace[v.Name]:FindFirstChild("Humanoid") and Workspace[v.Name].Humanoid.Health ~= 0 then
                        local Position = Camera:WorldToViewportPoint(Workspace[v.Name].HumanoidRootPart.Position);
                        local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude;
                        if Magnitude < Distance and Magnitude < FOV_Circle.Radius then
                            Closest = workspace[v.Name];
                            Distance = Magnitude;
                        end
                    end
                end
            end
            return Closest
        end

        local ThrowAtTarget = function(args1, args2, args3)
            return game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(args1,args2,args3);
        end
        
        ThrowAtTarget(workspace[ClosestPlayerToCursor().Name].Head.Position, 0, CFrame.new());
        
    end
end)

spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
        pcall(function()
            if _G.Toggle then
                for i, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do
                    if v:IsA("Part") then
                        if v.Archivable == true then
                            local PlayerPosition = ClosestPlayerToCursor().baseHitbox.CFrame
                            v.CFrame = PlayerPosition
                        end
                    end
                end
            end
        end)
    end)
end)

game:GetService('RunService').Stepped:connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)



spawn(function()
    pcall(function()
        Mouse.KeyDown:Connect(function(key)
            if _G.Toggle == true then
                _G.Toggle = true
            elseif _G.Toggle == false then
                _G.Toggle = false
                FOV_Circle.Visible = false
            end
        end)
    end)
end)

game:GetService('RunService').Stepped:connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)

game.Workspace.ChildAdded:Connect(function(child)
    if child.Name ~= lp.Name then 
        a = child.Name
        child:WaitForChild("HumanoidRootPart")
        ESP:Add(child.HumanoidRootPart, {
            Name = a,
            IsEnabled = "cpespbruh",
            Color = Color3.fromRGB(255,255,255)
        })
    end
end)

spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
for i,v in pairs(game:GetService('Players'):GetPlayers()) do
    if v.Name ~= game.Players.LocalPlayer.Name then
game.Workspace[v.Name].HumanoidRootPart.Size = QSizezx
game.Workspace[v.Name].HumanoidRootPart.Transparency = QTransparencyzx
game.Workspace[v.Name].HumanoidRootPart.Color = QColourzx
game.Workspace[v.Name].HumanoidRootPart.Material = "Neon"
game.Workspace[v.Name].HumanoidRootPart.CanCollide = false
wait()
end
end
end)
end)
