getgenv().keyssdtfhhdg = { 
    "6eastydd86agsd", --Test
    "8syagda86sgda8", --Hithere
    "dysagduaystgd@", --No
    "SharedKeyForAltAndHog", --AltandHog
    "saydgyasgd7atsfgd76tasf", --ixlrt#1216
    "shdayshduashduiahsdfgoogf@", --VCristero#0159
    "udsyfgfdyaushdouajsuda" --Temp
}

for i,v in pairs(getgenv().keyssdtfhhdg) do
if getgenv().key == v then
    getgenv().Whitelisted090 = true
end
end

if getgenv().Whitelisted090 == true then
    local old = getrenv().gcinfo
getrenv().gcinfo = function(...)
    return wait(9e9)
end

local CoreGui = game.CoreGui
local ContentProvider = game.ContentProvider
local RobloxGuis = {"RobloxGui", "TeleportGui", "RobloxPromptGui", "RobloxLoadingGui", "PlayerList", "RobloxNetworkPauseNotification", "PurchasePrompt", "HeadsetDisconnectedDialog", "ThemeProvider", "DevConsoleMaster"}

local function FilterTable(tbl)
    local context = syn_context_get()
    syn_context_set(7)
    local new = {}
    for i,v in ipairs(tbl) do --roblox iterates the array part
        if typeof(v) ~= "Instance" then
            table.insert(new, v)
        else
            if v == CoreGui or v == game then
                --insert only the default roblox guis
                for i,v in pairs(RobloxGuis) do
                    local gui = CoreGui:FindFirstChild(v)
                    if gui then
                        table.insert(new, gui)
                    end
                end

                if v == game then
                    for i,v in pairs(game:GetChildren()) do
                        if v ~= CoreGui then
                            table.insert(new, v)
                        end
                    end
                end
            else
                if not CoreGui:IsAncestorOf(v) then
                    table.insert(new, v)
                else
                    --don't insert it if it's a descendant of a different gui than default roblox guis
                    for j,k in pairs(RobloxGuis) do
                        local gui = CoreGui:FindFirstChild(k)
                        if gui then
                            if v == gui or gui:IsAncestorOf(v) then
                                table.insert(new, v)
                                break
                            end
                        end
                    end
                end
            end
        end
    end
    syn_context_set(context)
    return new
end

local old
old = hookfunc(ContentProvider.PreloadAsync, function(self, tbl, cb)
    if self ~= ContentProvider or type(tbl) ~= "table" or type(cb) ~= "function" then --note: callback can be nil but in that case it's useless anyways
        return old(self, tbl, cb)
    end

    --check for any errors that I might've missed (such as table being {[2] = "something"} which causes "Unable to cast to Array")
    local err
    task.spawn(function() --TIL pcalling a C yield function inside a C yield function is a bad idea ("cannot resume non-suspended coroutine")
        local s,e = pcall(old, self, tbl)
        if not s and e then
            err = e
        end
    end)
   
    if err then
        return old(self, tbl) --don't pass the callback, just in case
    end

    tbl = FilterTable(tbl)
    return old(self, tbl, cb)
end)

local old
old = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    if self == ContentProvider and (method == "PreloadAsync" or method == "preloadAsync") then
        local args = {...}
        if type(args[1]) ~= "table" or type(args[2]) ~= "function" then
            return old(self, ...)
        end

        local err
        task.spawn(function()
            setnamecallmethod(method) --different thread, different namecall method
            local s,e = pcall(old, self, args[1])
            if not s and e then
                err = e
            end
        end)

        if err then
            return old(self, args[1])
        end

        args[1] = FilterTable(args[1])
        setnamecallmethod(method)
        return old(self, args[1], args[2])
    end
    return old(self, ...)
end)
--[[hitbox extender]]
local baseHitboxSize = Vector3.new(2, 2, 1);
local baseTransparency = 1;
--[spoofer]
local oldGameIndex; oldGameIndex = hookmetamethod(game, "__index", newcclosure(function(...)
    local Self, Key = ...;

    if typeof(Self) == "Instance" and type(Key) == "string" and tostring(Self) == "HumanoidRootPart" and (Key == "Size" or Key == "Transparency") then
        if Key == "Size" then
            return baseHitboxSize;
        end;
        return baseTransparency;
    end;

    return oldGameIndex(...);
end));
local lp = game.Players.LocalPlayer
local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = game:GetService("Players").LocalPlayer:GetMouse()
FOV_Circle = Drawing.new("Circle")
FOV_Circle.Color = Color3.fromRGB(255,255,255)
FOV_Circle.Thickness = 2.5
FOV_Circle.NumSides = 100
FOV_Circle.Radius = 200
FOV_Circle.Visible = false
FOV_Circle.Filled = false
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
local UILibrary = loadstring(game:HttpGet("https://pastebin.com/raw/V1ca2q9s"))()

local MainUI = UILibrary.Load("ShushHUB")
local FirstPage = MainUI.AddPage("AutoFarm")
local FirstLabel = FirstPage.AddLabel("Shush's Auto")
local FirstButton = FirstPage.AddButton("AutoFarm", function()
    print("AutoFarm Enabled")
    
spawn(function()
local Player = game:GetService("Players").LocalPlayer
local wS = game:GetService("Workspace")
local ClosestPlayer = function()
local Closest = nil
local Distance = 9e9

    for i, v in next, game:GetService("Players"):GetPlayers() do
        if v.Name ~= Player.Name then
            if wS[v.Name] and wS[v.Name]:FindFirstChild("Humanoid") and wS[v.Name]:FindFirstChild("Humanoid").Health ~= 0 then
                local Magnitude = (Player.Character.Head.Position - wS[v.Name].Head.Position).Magnitude
                if Magnitude < Distance then
                    Closest = wS[v.Name]
                    Distance = Magnitude
                    end
                end
            end
        end
    return Closest
end

spawn(function()
    while wait(.7) do
            repeat wait() until Player.Character:FindFirstChild("Head")
            if Player:DistanceFromCharacter(ClosestPlayer().Head.Position) <= 6.5 then
                Player.PlayerScripts.localknifehandler.HitCheck:Fire(ClosestPlayer())
            else
            end
        end
end)
end)

spawn(function()
    while wait(.25) do
        pcall(function()
            if game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.Visible then
                local waittime = 0.145 -- the time between teleportation. change to a higher value if anticheat gets you.
              local PathfindingService = game:GetService("PathfindingService")
                local Target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
              local target = game.Workspace[Target].HumanoidRootPart.Position
              local path = PathfindingService:CreatePath()
              path:ComputeAsync(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position, target)
              local waypointz = path:GetWaypoints()
              local folder = Instance.new("Folder", game.Workspace)
              folder.Name = "waypoints"
              local count = 1
              for _, waypoint in pairs(waypointz) do
                local part = Instance.new("Part")
                part.Material = "Neon"
                part.Size = Vector3.new(.1, .1, .1)
                part.Position = waypoint.Position
                part.Anchored = true
                part.CanCollide = false
                part.Parent = game.Workspace
                part.Name = "n"..count
                part.Transparency = 1
                count = count + 1
                part.Parent = folder
              end
              local points = folder:GetChildren()
              local countpoints = #points
              local value = 1
              for _ = 1, countpoints do
                local ts = game:GetService("TweenService")
                local plrs = game:GetService("Players")
                local player = game:GetService("Players").LocalPlayer
                local tweenInfo = TweenInfo.new(waittime)
                local t = ts:Create(player.Character.HumanoidRootPart, tweenInfo, {
                  CFrame = CFrame.new(folder["n"..value].Position * Vector3.new(1,1.0008,1))
                })
                t:Play()
                t.Completed:Connect(function()
                end)
                value = value + 1
                wait(waittime + .01)
              end
              folder:Destroy()
            end
        end)
    end
end)
spawn(function()
    local function randompart()
        local hits = {
            0,
            1,
            2,
            -1,
            -2,
        }
        return hits[math.random(1, #hits)]
    end
    while wait() do
        pcall(function()
            if game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") then
                for i, v in pairs(game.Players:GetPlayers()) do
                    if v.Name == game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text then
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(Game.Players.LocalPlayer.Backpack.Knife)
                            wait(.3)
                            local Target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
                            local x = game.Workspace[Target].HumanoidRootPart.Position.X + randompart()
                            local y = game.Workspace[Target].HumanoidRootPart.Position.Y + randompart()
                            local z = game.Workspace[Target].HumanoidRootPart.Position.Z + randompart()
                            local args = {
                                [1] = Vector3.new(x, y, z),
                                [2] = 0,
                                [3] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                            }
                            game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(unpack(args))
                            wait(.1)
                            game:GetService("Players").localPlayer.Character:FindFirstChildOfClass("Humanoid"):UnequipTools()
                            wait(.6)
                        end
                    end
                end
            end
        end)
    end
end)
function Hbe()
local T = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
game.Workspace[T].HumanoidRootPart.Size = Vector3.new(20,20,20)
game.Workspace[T].HumanoidRootPart.Transparency = 1
game.Workspace[T].HumanoidRootPart.BrickColor = BrickColor.new("Really red")
game.Workspace[T].HumanoidRootPart.Material = "Neon"
game.Workspace[T].HumanoidRootPart.CanCollide = false
end
local mt = getrawmetatable(game);
make_writeable(mt);
local old_index = mt.__index;

mt.__index = function(a, b)
if tostring(a) == "HumanoidRootPart" then
if tostring(b) == "Size" then
return Vector3.new(2, 2, 1);
end
end
return old_index(a, b);
end
spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
            for i,v in next, game:GetService('Players'):GetPlayers() do
                local T = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
                if v.Name ~= game:GetService('Players').LocalPlayer.Name and T ~= game:GetService('Players').LocalPlayer.Name and T == T then
                    pcall(function()
                    Hbe()
                    end)
                end
            end
    end)
end)

local noclip = true 
char = game.Players.LocalPlayer.Character 
while true do 
  if noclip == true then 
    for _,v in pairs(char:children()) do 
      pcall(function() if v.className == "Part" then v.CanCollide = false elseif v.ClassName == "Model" then
         v.Head.CanCollide = false end end) 
    end 
  end 
game:service("RunService").Stepped:wait() 
end
    end)
local FirstPage = MainUI.AddPage("LocalPlayer")
local FirstLabel = FirstPage.AddLabel("GodMode/Invis")
local FirstButton = FirstPage.AddButton("GOD", function()
spawn(function()
    while wait(1) do
        pcall(function()
            if game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.SpectateBar.ButtonBar.GhostB.Visible == true then
                wait(.5)
                for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.SpectateBar.ButtonBar.GhostB.MouseButton1Click)) do
                    v:Fire()
                end
            end
        end)
    end
end)

spawn(function()
    while wait(.5) do
        pcall(function()
            for _,v in pairs(game:GetService("Workspace").GhostCoins:GetDescendants()) do
                if v:IsA("TouchTransmitter") then
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0) --0 is touch
                    wait(.5)
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 1) -- 1 is untouch
                end
            end
        end)
    end
end)
end)
local FirstLabel = FirstPage.AddLabel("WalkSpeed/JumpPower/Gravity")
local FirstSlider = FirstPage.AddSlider("WalkSpeed", {Min = 0, Max = 35, Def = 16}, function(Value)
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
end)
local FirstSlider = FirstPage.AddSlider("JumpPower", {Min = 0, Max = 500, Def = 50}, function(Value)
game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
end)
local FirstSlider = FirstPage.AddSlider("Gravity", {Min = 196, Max = 0, Def = 196}, function(Value)
game.Workspace.Gravity = Value
end)
local FirstPage = MainUI.AddPage("Knife")
local FirstButton = FirstPage.AddButton("Stab Aura", function()
    spawn(function()
local Player = game:GetService("Players").LocalPlayer
local wS = game:GetService("Workspace")
local ClosestPlayer = function()
local Closest = nil
local Distance = 9e9

    for i, v in next, game:GetService("Players"):GetPlayers() do
        if v.Name ~= Player.Name then
            if wS[v.Name] and wS[v.Name]:FindFirstChild("Humanoid") and wS[v.Name]:FindFirstChild("Humanoid").Health ~= 0 then
                local Magnitude = (Player.Character.Head.Position - wS[v.Name].Head.Position).Magnitude
                if Magnitude < Distance then
                    Closest = wS[v.Name]
                    Distance = Magnitude
                    end
                end
            end
        end
    return Closest
end

spawn(function()
    while wait(.7) do
            repeat wait() until Player.Character:FindFirstChild("Head")
            if Player:DistanceFromCharacter(ClosestPlayer().Head.Position) <= 6.5 then
                Player.PlayerScripts.localknifehandler.HitCheck:Fire(ClosestPlayer())
            else
            end
        end
end)
end)
end)
local FirstButton = FirstPage.AddButton("Throw Aura", function()
    spawn(function()
    local function randompart()
        local hits = {
            0,
            1,
            2,
            -1,
            -2,
        }
        return hits[math.random(1, #hits)]
    end
    while wait() do
        pcall(function()
            if game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") then
                for i, v in pairs(game.Players:GetPlayers()) do
                    if v.Name == game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text then
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(Game.Players.LocalPlayer.Backpack.Knife)
                            wait(.3)
                            local Target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
                            local x = game.Workspace[Target].HumanoidRootPart.Position.X + randompart()
                            local y = game.Workspace[Target].HumanoidRootPart.Position.Y + randompart()
                            local z = game.Workspace[Target].HumanoidRootPart.Position.Z + randompart()
                            local args = {
                                [1] = Vector3.new(x, y, z),
                                [2] = 0,
                                [3] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                            }
                            game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(unpack(args))
                            wait(.1)
                            game:GetService("Players").localPlayer.Character:FindFirstChildOfClass("Humanoid"):UnequipTools()
                            wait(.6)
                        end
                    end
                end
            end
        end)
    end
end)
    end)
local FirstPage = MainUI.AddPage("Silent aim")
local FirstLabel = FirstPage.AddLabel("Aim cheats")
local FirstDropdown = FirstPage.AddDropdown("Aim method", {
"Silent Aim",
"Aimbot"
}, function(Value)
if Value == "Aimbot" then
    print("Aimbot")
getgenv().Toggles = true -- Aimbot
_G.Toggle = false -- Silent aim
else
    print("Silent Aim")
    getgenv().Aimbot = false
    getgenv().OtherAim = true
end
end)
local FirstToggle = FirstPage.AddToggle("Aim FOV", false, function(Value)
if Value == true then
    FOV_Circle.Visible = true
    else 
        if Value == false then
            FOV_Circle.Visible = false
        end
        end
end)
local FirstSlider = FirstPage.AddSlider("FOV Size", {Min = 50, Max = 500, Def = 200}, function(Value)
FOV_Circle.Radius = Value
end)
local FirstPage = MainUI.AddPage("HBE")

local FirstLabel = FirstPage.AddLabel("HBE Settings")
local FirstToggle = FirstPage.AddToggle("HBE", false, function(Value)
if Value == true then
    ---Settings for on
    getgenv().HBEONLINE = true
    getgenv().QColourzx = Color3.fromRGB(255,255,255)
    getgenv().QSizezx = Vector3.new(10,10,10)
    getgenv().QTransparencyzx = .7
    else
        if Value == false then
        ---Settings for off
        getgenv().HBEONLINE = false
        getgenv().QSizezx = Vector3.new(2,2,1)  
        getgenv().QTransparencyzx = 1
        end
        end
end)
local FirstSlider = FirstPage.AddSlider("HBE Size", {Min = 0, Max = 100, Def = 5}, function(Value)
    if  getgenv().HBEONLINE == true then
getgenv().QSizezx = Vector3.new(Value,Value,Value)
end
end)
local FirstPicker = FirstPage.AddColourPicker("HBE Colour", "white", function(Value)
getgenv().QColourzx = Value
end)
local FirstPicker = FirstPage.AddColourPicker("HBE Target Colour", "white", function(Value)
getgenv().QColourzxo = Value
end)
local FirstPage = MainUI.AddPage("ESP")
local FirstLabel = FirstPage.AddLabel("ESP/Chams")
local FirstButton = FirstPage.AddButton("Chams", function()
   spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
for i,v in pairs(game.Players:GetPlayers()) do
    if v.Name ~= game.Players.LocalPlayer.Name then
        Instance.new("Highlight", game.Workspace[v.Name])
    end
end
end)
end)
end)

local FirstPage = MainUI.AddPage("Promo Page")
local FirstLabel = FirstPage.AddLabel("Welcome to the promo page")
local FirstLabel = FirstPage.AddLabel("You can pay me to do promos on my script")
local FirstLabel = FirstPage.AddLabel("The promo today is from")
local FirstLabel = FirstPage.AddLabel("Lunargames_#6652")
local FirstLabel = FirstPage.AddLabel("Contact them on discord for custom synapse themes")

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and _G.Toggle == true then
        
        task.wait(.35);
    
        local function ClosestPlayerToCursor()
            local Closest = nil;
            local Distance = 9e9;
            for i, v in pairs(game:GetService("Players"):GetPlayers()) do
                if v ~= Player then
                    if Workspace[v.Name]:FindFirstChild("Humanoid") and Workspace[v.Name].Humanoid.Health ~= 0 then
                        local Position = Camera:WorldToViewportPoint(Workspace[v.Name].HumanoidRootPart.Position);
                        local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude;
                        if Magnitude < Distance and Magnitude < FOV_Circle.Radius then
                            Closest = workspace[v.Name];
                            Distance = Magnitude;
                        end
                    end
                end
            end
            return Closest
        end

        local ThrowAtTarget = function(args1, args2, args3)
            return game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(args1,args2,args3);
        end
        
        ThrowAtTarget(workspace[ClosestPlayerToCursor().Name].Head.Position, 0, CFrame.new());
        
    end
end)

spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
        pcall(function()
            if _G.Toggle then
                for i, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do
                    if v:IsA("Part") then
                        if v.Archivable == true then
                            local PlayerPosition = ClosestPlayerToCursor().baseHitbox.CFrame
                            v.CFrame = PlayerPosition
                        end
                    end
                end
            end
        end)
    end)
end)

game:GetService('RunService').Stepped:connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)



spawn(function()
    pcall(function()
        Mouse.KeyDown:Connect(function(key)
            if _G.Toggle == true then
                _G.Toggle = true
            elseif _G.Toggle == false then
                _G.Toggle = false
            end
        end)
    end)
end)

game:GetService('RunService').Stepped:connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)

game.Workspace.ChildAdded:Connect(function(child)
    if child.Name ~= lp.Name then 
        a = child.Name
        child:WaitForChild("HumanoidRootPart")
        ESP:Add(child.HumanoidRootPart, {
            Name = a,
            IsEnabled = "cpespbruh",
            Color = Color3.fromRGB(255,255,255)
        })
    end
end)

game:GetService('RunService').Stepped:connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)

local function ClosestPlayerToCursor()
    local Closest = nil
    local Distance = 9e9
    for i, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v ~= Player then
            if Workspace[v.Name]:FindFirstChild("Humanoid") and Workspace[v.Name].Humanoid.Health ~= 0 then
                local Position = Camera:WorldToViewportPoint(Workspace[v.Name].HumanoidRootPart.Position)
                local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if Magnitude < Distance and Magnitude < FOV_Circle.Radius then
                    Closest = Workspace[v.Name]
                    Distance = Magnitude
                end
            end
        end
    end
    return Closest
end

getgenv().Toggles = false
spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
        pcall(function()
            if getgenv().Toggles then
                for i, v in pairs(game:GetService("Workspace").KnifeHost.PowerUps:GetDescendants()) do
                    if v:IsA("Part") then
                        v.Archivable = false
                    end
                end
            end
        end)
    end)
end)


spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
        pcall(function()
            if getgenv().Toggles then
                for i, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do
                    if v:IsA("Part") then
                        if v.Archivable == true then
                            local PlayerPosition = ClosestPlayerToCursor().baseHitbox.CFrame
                            v.CFrame = PlayerPosition
                        end
                    end
                end
            end
        end)
    end)
end)

spawn(function()
    pcall(function()
        Mouse.KeyDown:Connect(function(key)
            if key == "pppp" and getgenv().Toggles == false then
                getgenv().Toggles = true
                FOV_Circle.Visible = true
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Aimbot";
                    Text = "Enabled";
                    Duration = 2;
                })
            elseif key == "pppp" and getgenv().Toggles == true then
                getgenv().Toggles = false
                FOV_Circle.Visible = false
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Aimbot";
                    Text = "Disabled";
                    Duration = 2;
                })
            end
        end)
    end)
end)

local target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
local target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
for i,v in pairs(game:GetService('Players'):GetPlayers()) do
    if v.Name ~= game.Players.LocalPlayer.Name then
game.Workspace[v.Name].HumanoidRootPart.Size = QSizezx
game.Workspace[v.Name].HumanoidRootPart.Transparency = QTransparencyzx
game.Workspace[v.Name].HumanoidRootPart.Color = QColourzx
game.Workspace[v.Name].HumanoidRootPart.Material = "Neon"
game.Workspace[v.Name].HumanoidRootPart.CanCollide = false
local target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
if v.Name == target then
game.Workspace[v.Name].HumanoidRootPart.Color = QColourzxo
end
end
end
end)
end)
end
