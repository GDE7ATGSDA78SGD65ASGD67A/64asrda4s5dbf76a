local old = getrenv().gcinfo
getrenv().gcinfo = function(...)
    return wait(9e9)
end

local CoreGui = game.CoreGui
local ContentProvider = game.ContentProvider
local RobloxGuis = {"RobloxGui", "TeleportGui", "RobloxPromptGui", "RobloxLoadingGui", "PlayerList", "RobloxNetworkPauseNotification", "PurchasePrompt", "HeadsetDisconnectedDialog", "ThemeProvider", "DevConsoleMaster"}

local function FilterTable(tbl)
    local context = syn_context_get()
    syn_context_set(7)
    local new = {}
    for i,v in ipairs(tbl) do --roblox iterates the array part
        if typeof(v) ~= "Instance" then
            table.insert(new, v)
        else
            if v == CoreGui or v == game then
                --insert only the default roblox guis
                for i,v in pairs(RobloxGuis) do
                    local gui = CoreGui:FindFirstChild(v)
                    if gui then
                        table.insert(new, gui)
                    end
                end

                if v == game then
                    for i,v in pairs(game:GetChildren()) do
                        if v ~= CoreGui then
                            table.insert(new, v)
                        end
                    end
                end
            else
                if not CoreGui:IsAncestorOf(v) then
                    table.insert(new, v)
                else
                    --don't insert it if it's a descendant of a different gui than default roblox guis
                    for j,k in pairs(RobloxGuis) do
                        local gui = CoreGui:FindFirstChild(k)
                        if gui then
                            if v == gui or gui:IsAncestorOf(v) then
                                table.insert(new, v)
                                break
                            end
                        end
                    end
                end
            end
        end
    end
    syn_context_set(context)
    return new
end

local old
old = hookfunc(ContentProvider.PreloadAsync, function(self, tbl, cb)
    if self ~= ContentProvider or type(tbl) ~= "table" or type(cb) ~= "function" then --note: callback can be nil but in that case it's useless anyways
        return old(self, tbl, cb)
    end

    --check for any errors that I might've missed (such as table being {[2] = "something"} which causes "Unable to cast to Array")
    local err
    task.spawn(function() --TIL pcalling a C yield function inside a C yield function is a bad idea ("cannot resume non-suspended coroutine")
        local s,e = pcall(old, self, tbl)
        if not s and e then
            err = e
        end
    end)
   
    if err then
        return old(self, tbl) --don't pass the callback, just in case
    end

    tbl = FilterTable(tbl)
    return old(self, tbl, cb)
end)

local old
old = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    if self == ContentProvider and (method == "PreloadAsync" or method == "preloadAsync") then
        local args = {...}
        if type(args[1]) ~= "table" or type(args[2]) ~= "function" then
            return old(self, ...)
        end

        local err
        task.spawn(function()
            setnamecallmethod(method) --different thread, different namecall method
            local s,e = pcall(old, self, args[1])
            if not s and e then
                err = e
            end
        end)

        if err then
            return old(self, args[1])
        end

        args[1] = FilterTable(args[1])
        setnamecallmethod(method)
        return old(self, args[1], args[2])
    end
    return old(self, ...)
end)
--[[hitbox extender]]
local baseHitboxSize = Vector3.new(2, 2, 1);
local baseTransparency = 1;
--[spoofer]
local oldGameIndex; oldGameIndex = hookmetamethod(game, "__index", newcclosure(function(...)
    local Self, Key = ...;

    if typeof(Self) == "Instance" and type(Key) == "string" and tostring(Self) == "HumanoidRootPart" and (Key == "Size" or Key == "Transparency") then
        if Key == "Size" then
            return baseHitboxSize;
        end;
        return baseTransparency;
    end;

    return oldGameIndex(...);
end));
local lp = game.Players.LocalPlayer
local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = game:GetService("Players").LocalPlayer:GetMouse()
FOV_Circle = Drawing.new("Circle")
FOV_Circle.Color = Color3.fromRGB(255,255,255)
FOV_Circle.Thickness = 2.5
FOV_Circle.NumSides = 100
FOV_Circle.Radius = 200
FOV_Circle.Visible = false
FOV_Circle.Filled = false
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
local UILibrary = loadstring(game:HttpGet("https://pastebin.com/raw/V1ca2q9s"))()

local MainUI = UILibrary.Load("ShushHUB")
local FirstPage = MainUI.AddPage("LocalPlayer")
local FirstLabel = FirstPage.AddLabel("GodMode/Invis")
local FirstButton = FirstPage.AddButton("GOD", function()
spawn(function()
    while wait(1) do
        pcall(function()
            if game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.SpectateBar.ButtonBar.GhostB.Visible == true then
                wait(.5)
                for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.SpectateBar.ButtonBar.GhostB.MouseButton1Click)) do
                    v:Fire()
                end
            end
        end)
    end
end)

spawn(function()
    while wait(.5) do
        pcall(function()
            for _,v in pairs(game:GetService("Workspace").GhostCoins:GetDescendants()) do
                if v:IsA("TouchTransmitter") then
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0) --0 is touch
                    wait(.5)
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 1) -- 1 is untouch
                end
            end
        end)
    end
end)
end)
local FirstLabel = FirstPage.AddLabel("WalkSpeed/JumpPower/Gravity")
local FirstSlider = FirstPage.AddSlider("WalkSpeed", {Min = 0, Max = 35, Def = 16}, function(Value)
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
end)
local FirstSlider = FirstPage.AddSlider("JumpPower", {Min = 0, Max = 500, Def = 50}, function(Value)
game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
end)
local FirstSlider = FirstPage.AddSlider("Gravity", {Min = 196, Max = 0, Def = 196}, function(Value)
game.Workspace.Gravity = Value
end)
local FirstPage = MainUI.AddPage("Knife")
local FirstButton = FirstPage.AddButton("Stab Aura", function()
    spawn(function()
local Player = game:GetService("Players").LocalPlayer
local wS = game:GetService("Workspace")
local ClosestPlayer = function()
local Closest = nil
local Distance = 9e9

    for i, v in next, game:GetService("Players"):GetPlayers() do
        if v.Name ~= Player.Name then
            if wS[v.Name] and wS[v.Name]:FindFirstChild("Humanoid") and wS[v.Name]:FindFirstChild("Humanoid").Health ~= 0 then
                local Magnitude = (Player.Character.Head.Position - wS[v.Name].Head.Position).Magnitude
                if Magnitude < Distance then
                    Closest = wS[v.Name]
                    Distance = Magnitude
                    end
                end
            end
        end
    return Closest
end

spawn(function()
    while wait() do
            repeat wait() until Player.Character:FindFirstChild("Head")
            if Player:DistanceFromCharacter(ClosestPlayer().Head.Position) <= 4 then
                Player.PlayerScripts.localknifehandler.HitCheck:Fire(ClosestPlayer())
                wait()
            else
                wait()
            end
        end
end)
end)
end)
local FirstButton = FirstPage.AddButton("Throw Aura", function()
    spawn(function()
    local function randompart()
        local hits = {
            0,
            1,
            2,
            -1,
            -2,
        }
        return hits[math.random(1, #hits)]
    end
    while wait() do
        pcall(function()
            if game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") then
                for i, v in pairs(game.Players:GetPlayers()) do
                    if v.Name == game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text then
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(Game.Players.LocalPlayer.Backpack.Knife)
                            wait(.3)
                            local Target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
                            local x = game.Workspace[Target].HumanoidRootPart.Position.X + randompart()
                            local y = game.Workspace[Target].HumanoidRootPart.Position.Y + randompart()
                            local z = game.Workspace[Target].HumanoidRootPart.Position.Z + randompart()
                            local args = {
                                [1] = Vector3.new(x, y, z),
                                [2] = 0,
                                [3] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                            }
                            game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(unpack(args))
                            wait(.1)
                            game:GetService("Players").localPlayer.Character:FindFirstChildOfClass("Humanoid"):UnequipTools()
                            wait(.6)
                        end
                    end
                end
            end
        end)
    end
end)
    end)
local FirstPage = MainUI.AddPage("Silent aim")
local FirstLabel = FirstPage.AddLabel("Super silent aim")
local FirstToggle = FirstPage.AddToggle("Silent aim", false, function(Value)
if Value == true then
    _G.Toggle = true
    else 
        if Value == false then
            _G.Toggle = false
        end
        end
end)
local FirstToggle = FirstPage.AddToggle("Silent aim FOV", false, function(Value)
if Value == true then
    FOV_Circle.Visible = true
    else 
        if Value == false then
            FOV_Circle.Visible = false
        end
        end
end)
local FirstSlider = FirstPage.AddSlider("FOV Size", {Min = 50, Max = 500, Def = 200}, function(Value)
FOV_Circle.Radius = Value
end)
local FirstPage = MainUI.AddPage("HBE")

local FirstLabel = FirstPage.AddLabel("HBE Settings")
local FirstToggle = FirstPage.AddToggle("HBE", false, function(Value)
if Value == true then
    ---Settings for on
    getgenv().QTransparencyzx = .7
    else
        if Value == false then
        ---Settings for off
        getgenv().QSizezx = Vector3.new(2,2,1)  
        getgenv().QTransparencyzx = 1
        end
        end
end)
local FirstSlider = FirstPage.AddSlider("HBE Size", {Min = 0, Max = 100, Def = 5}, function(Value)
getgenv().QSizezx = Vector3.new(Value,Value,Value)
end)
local FirstPicker = FirstPage.AddColourPicker("HBE Target Colour", "white", function(Value)
getgenv().QColourzx = Value
end)
local FirstPage = MainUI.AddPage("ESP")
local FirstLabel = FirstPage.AddLabel("ESP/Chams")
local FirstButton = FirstPage.AddButton("Chams", function()
    local players = game:GetService('Players')
local runService = game:GetService('RunService')
local coreGui = game:GetService('CoreGui')

local client = players.LocalPlayer
local h_parent = coreGui

if type(gethui) == 'function' then h_parent = gethui() end
if type(get_hidden_gui) == 'function' then h_parent = get_hidden_gui() end

local function create(class, properties)
	local object = Instance.new(class)
	for k, v in next, properties do
		object[k] = v;
	end
	return object
end

local function cleaner()
	-- basic cleanup class so we dont have to import maid or broom 
	local tasks = {}
	local function give(task)
		table.insert(tasks, task)
	end
	local function clean()
		for i = #tasks, 1, -1 do
			local task = table.remove(tasks, i)

			if typeof(task) == 'Instance' then task:Destroy() end
			if typeof(task) == 'RBXScriptSignal' then task:Disconnect() end
			if typeof(task) == 'function' then task() end
		end
	end
	return give, clean
end

local chams = {}
local function onPlayerAdded(player)
	-- cleanup functions
	
	local p_give, p_clean = cleaner() -- player shit
	local c_give, c_clean = cleaner() -- character shit

	local function onCharacterAdded(character)
		c_clean()

		local highlight = create('Highlight', {
			Adornee = character,
			Parent = h_parent,
		})

		local storage = { player, highlight }

		c_give(highlight)
		c_give(function()
			local index = table.find(chams, storage)
			if index then
				table.remove(chams, index)
			end
		end)

		table.insert(chams, storage)
	end

	if player.Character then
		task.spawn(onCharacterAdded, player.Character)
	end

	p_give(player.CharacterAdded:Connect(onCharacterAdded))
	p_give(player:GetPropertyChangedSignal('Parent'):Connect(function()
		if player.Parent ~= players then
			p_clean()
			c_clean()
		end
	end))

end

for _, player in next, players:GetPlayers() do
	if player ~= client then
		task.spawn(onPlayerAdded, player)
	end
end

players.PlayerAdded:Connect(onPlayerAdded)

local function fail(r) client:Kick(r) end

-- just dont let this shit err
local success, response = pcall(game.HttpGet, game, 'https://raw.githubusercontent.com/wally-rblx/uwuware-ui/main/main.lua')
if not success then return fail'cant load ui library (httpget)' end

local fn, err = loadstring(response, '@uwuware-ui')
if not fn then return fail'cant load ui library (loadstring)' end

local _, library = pcall(fn)
if not _ then return fail'cant load ui library (error: ' .. tostring(library) .. ')' end

local window = library:CreateWindow('Player chams')

window:AddToggle({ text = 'Enabled', flag = 'enabled' })
window:AddToggle({ text = 'Use team colors', flag = 'teamColors' })
window:AddToggle({ text = 'Show teammates', flag = 'showTeams' })

window:AddColor({ text = 'Enemies', flag = 'enemyColor', color = Color3.fromRGB(255, 25, 25) })
window:AddColor({ text = 'Enemies (outline)', flag = 'enemyOutlineColor', color = Color3.new() })

window:AddColor({ text = 'Teammates', flag = 'allyColor', color = Color3.fromRGB(0, 255, 140) })
window:AddColor({ text = 'Teammates (outline)', flag = 'allyOutlineColor', color = Color3.new() })

window:AddSlider({ text = 'Transparency', min = 0, max = 1, value = 0, flag = 'transparency', float = 0.1 })
window:AddSlider({ text = 'Outline transparency', min = 0, max = 1, value = 0, flag = 'outlineTransparency', float = 0.1 })

library:Init()

runService.Stepped:Connect(function()
	for i = 1, #chams do
		local store = chams[i]
		local plr, highlight = store[1], store[2]

		local isSameTeam = plr.Team == client.Team
		local plrColor = (isSameTeam and library.flags.allyColor or library.flags.enemyColor)
		local plrOutlineColor = (isSameTeam and library.flags.allyOutlineColor or library.flags.enemyOutlineColor)

		local doesShow = library.flags.enabled 

		if library.flags.teamColors then plrColor = plr.TeamColor end
		if library.flags.showTeams then doesShow = isSameTeam end

		highlight.Enabled = doesShow
		
		highlight.FillColor = plrColor
		highlight.OutlineColor = plrOutlineColor

		highlight.FillTransparency = library.flags.transparency
		highlight.OutlineTransparency = library.flags.outlineTransparency
	end
end)
    end)
game:GetService('RunService').RenderStepped:connect(function()
    pcall(function()
        if _G.Toggle then
            for i, v in pairs(game:GetService("Workspace").KnifeHost.PowerUps:GetDescendants()) do
                if v:IsA("Part") then
                    v.Archivable = true
                end
            end
        end
    end)
end)

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and _G.Toggle == true then
        
        task.wait(.35);
    
        local function ClosestPlayerToCursor()
            local Closest = nil;
            local Distance = 9e9;
            for i, v in pairs(game:GetService("Players"):GetPlayers()) do
                if v ~= Player then
                    if Workspace[v.Name]:FindFirstChild("Humanoid") and Workspace[v.Name].Humanoid.Health ~= 0 then
                        local Position = Camera:WorldToViewportPoint(Workspace[v.Name].HumanoidRootPart.Position);
                        local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude;
                        if Magnitude < Distance and Magnitude < FOV_Circle.Radius then
                            Closest = workspace[v.Name];
                            Distance = Magnitude;
                        end
                    end
                end
            end
            return Closest
        end

        local ThrowAtTarget = function(args1, args2, args3)
            return game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(args1,args2,args3);
        end
        
        ThrowAtTarget(workspace[ClosestPlayerToCursor().Name].Head.Position, 0, CFrame.new());
        
    end
end)

spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
        pcall(function()
            if _G.Toggle then
                for i, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do
                    if v:IsA("Part") then
                        if v.Archivable == true then
                            local PlayerPosition = ClosestPlayerToCursor().baseHitbox.CFrame
                            v.CFrame = PlayerPosition
                        end
                    end
                end
            end
        end)
    end)
end)

game:GetService('RunService').Stepped:connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)



spawn(function()
    pcall(function()
        Mouse.KeyDown:Connect(function(key)
            if _G.Toggle == true then
                _G.Toggle = true
            elseif _G.Toggle == false then
                _G.Toggle = false
                FOV_Circle.Visible = false
            end
        end)
    end)
end)

game:GetService('RunService').Stepped:connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)

game.Workspace.ChildAdded:Connect(function(child)
    if child.Name ~= lp.Name then 
        a = child.Name
        child:WaitForChild("HumanoidRootPart")
        ESP:Add(child.HumanoidRootPart, {
            Name = a,
            IsEnabled = "cpespbruh",
            Color = Color3.fromRGB(255,255,255)
        })
    end
end)

local target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
for i,v in pairs(game:GetService('Players'):GetPlayers()) do
    if v.Name ~= game.Players.LocalPlayer.Name then
game.Workspace[v.Name].HumanoidRootPart.Size = QSizezx
game.Workspace[v.Name].HumanoidRootPart.Transparency = QTransparencyzx
game.Workspace[v.Name].HumanoidRootPart.BrickColor = BrickColor.new("Bright green")
game.Workspace[v.Name].HumanoidRootPart.Material = "Neon"
game.Workspace[v.Name].HumanoidRootPart.CanCollide = false
local target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
if v.Name == target and v.Name ~= game.Players.LocalPlayer.Name then
    game.Workspace[v.Name].HumanoidRootPart.Color = QColourzx
    end
end
end
end)
end)
